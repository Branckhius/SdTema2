class Heap:
    def __init__(self, lst=[]):
        self.data = lst
        self.heapify()

    def heapify(self):
        for i in range(len(self.data) - 1, -1, -1):
            self._downheap(i)

    def _downheap(self, i):
        while i * 2 + 1 < len(self.data):
            j = i * 2 + 1
            if j + 1 < len(self.data) and self.data[j + 1] < self.data[j]:
                j += 1
            if self.data[i] < self.data[j]:
                break
            aux=self.data[i]
            self.data[i]= self.data[j]
            self.data[j]=aux
            i = j

    def insert(self, x):
        self.data.append(x)
        self._upheap(len(self.data) - 1)

    def _upheap(self, i):
        while i > 0 and self.data[(i - 1) // 2] > self.data[i]:
            aux=self.data[(i - 1) // 2]
            self.data[(i - 1) // 2]= self.data[i]
            self.data[i]=aux
            i = (i - 1) // 2

    def extract_min(self):
        if not self.data:
            return None
        result = self.data[0]
        self.data[0] = self.data[-1]
        self.data.pop()
        self._downheap(0)
        return result

    def merge_heap(self, other_heap):
        for x in other_heap.data:
            self.insert(x)

hp=Heap()
hp.insert(3)
hp.insert(5)
hp.insert(8)
hp.insert(1)
hp.insert(2)
hp.insert(22)
hp.insert(11)
print(hp.data)
